

:Caching of DisplayObjects

- It didn't work when I tried caching containers.  It really messed up the 
  look of things.

    - TimeDisp container
    - CurrentMomentDisp
    - AtomCondition (caching its assoc'd UpdateSquare container)

  those things aren't cached at all. 

  I suspect it's a bug in EaselJS.

  If I got it working, I could cache the updateSquare container after 
  the atoms in it have been counted.

- Didn't cache text labels, as it's not clear where they are drawn in 
  relation to their x,y coordinates (the x and y doesn't define their 
  top lefthand corner, I think).

- Not clear to me there's any performance gains from caching simple 
  stuff like activeBGs and rects like pens.  Could it actually slow 
  things down?


:on being able to speed stuff up.

    ...so if you are setting all animations to happen over a duration of a 
    certain number of milliseconds

    and the ticker is what is counting the number of milliseconds

    well, you could change it so that it updates the number of milliseconds 
    faster

    ..but what i'm wondering is whether the 'ticks' stuff instead of milliseconds 
    is meant as a way of doing this?


:[i think now not so important] problem with x pos of updater 

      when i made stuff initially paused and drew things in their inital positions
      this put the updater at its x pos over the grid rather than off to the side

      how do I fix this? 

      i got it to draw in correct initial position by doing this: 

        ln 2449
        
            this.container.x = this.offToSideX;

      but then this stuffs other stuff up... it never moves onto grid but does everything off in 
      that position to the right...


:[not immediate] trying to figure out why the grid active BG is displaying 
:on top of the grid 
 
    see how the active BG is in one of the other cases and see if there's any differences.

    lookingat at CountComponent's activeBG

    constructor:

        this.container = new Container();

        this.activeBG = new Shape();
        this.activeBG.visible = false;
        this.container.addChild(this.activeBG);

        this.shape = new Shape();
        this.container.addChild(this.shape);

    draw()

        draws activeBG

        draws shape


    showActiveBGTween
        var tween;
        tween = sequencer.getPausedTween(this.activeBG)
                    .wait(50)
                    .to({alpha:0,visible:true},50)
                    .to({alpha:1,visible:true},500)
                    .wait(50);
        return tween;


    hideActiveBGTween
        var tween;
        tween = sequencer.getPausedTween(this.activeBG)
                    .wait(50)
                    .to({alpha:0},250)
                    //.to({visible:false},50)
        ;
        return tween;

    in updater constructor

        creates countComponent
        add's countComponent.container to its container

    in updater's draw function

        this.countComponent.draw();
        

:on giving updater rounded corners

    instead of drawing lines to each vertex
    say we're talking about the top-right corner
    where the line ends at vertex (and say it's a horiz line)
        lineTo(x-radius,y)
    then draw the arc
        arc(x-radius,y-radius)
    where the line starts at a vertext (and say it's a vert line)
        moveTo(x,y+radius)
    ...and the thing is, there's the "direction" the arc needs to be drawn 
    in.

    ...in principle, i could write a function that takes a bunch of points 
    describing a path, as well as a radius and the obj to draw on, and 
    which does all the drawing of the drawOthogonalRoundedPath

    rectangular fill... i think what i'd need to do is draw the entire 
    updater bounds in a single path and fill that path.

        and i should do a test of that first to make sure that kind of thing works 
        ok.


:being able to jump time forwards

    - i wonder if you can call Ticker.tick(2000); to jump forwards 2 seconds?

    - and of course the other option would be to use Timeline...

        might be able to use

        setPosition ( value , actionsMode )
            Advances the timeline to the specified position.
            value - pos to seek to in milliseconds.
            actionsMode - Optional parameter specifying how actions are handled. 
            See Tween.setPosition for more details.

        void tick ( delta )
            Advances this timeline by the specified amount of time in 
            milliseconds (or ticks if useTicks is true).


::getting pause/play to work with mult diagrams on the page


:::attempt 1 - pausing/playing by adding/removing stage as listener on 
ticker

-> bloody doesn't work, for reason I was concerned about - it isn't just receving ticks from the 
ticker that make it go to the next animation frame, it's receiving time information from the ticker 
and it shows the animation for that moment in time.  So if you pause it 


---

these are the changes I made that didn't work

 
 
-    function PauseScreen(canvas,stage,updaterAnimation) {
+    function PauseScreen(canvas,stage,updaterAnimation,isPaused) {
 
         this.updaterAnimation = updaterAnimation;

==


         this.mode = this._PAUSE_MODE;
 
+        this.isPaused = isPaused;
+
         this.container = new Container();
-        if (!Ticker.getPaused()) { 
+        if (!this.isPaused) { 
             this.container.visible = false; 
         } else {
             this.container.visible = true;


==


         this.play = function() {
             this.container.visible = false;
-            Ticker.setPaused(false);
+            this.isPaused = false;
+            Ticker.addListener(this.stage);
         }
 
         this.pause = function() {
             this.container.visible = true;
-            Ticker.setPaused(true);
+            this.isPaused = true;
+            Ticker.removeListener(this.stage);
         }
 
         this.pauseAndShowResetScreen = function() {
+            this.pause();
             this.restartBox.visible = true;
             this.playButton.visible = false;
-            this.pause();
             this.mode = this._RESTART_MODE;
         }
 
         this.toggle = function() {
-            if (Ticker.getPaused()) {
+            if (this.isPaused) {
                 this.play();
             } else {
                 this.pause();

==

                this.restartBox.visible = false;
                this.stage.removeAllChildren();
                Ticker.removeListener(this.stage);
-               Ticker.setPaused(false);
                this.updaterAnimation.cueAnimation();
            } else {
                alert("Invalid PauseScreen mode");


==



         this.start = function() {
-
-            Ticker.setFPS(25);
-            Ticker.setPaused(true);
             this.cueAnimation();
-
         }

         this.cueAnimation = function() {


==

 
             sequencer = new Sequencer();
 
-            pauseScreen = new PauseScreen(this.canvas,stage,this);
+            var paused = true;
+            pauseScreen = new PauseScreen(this.canvas,stage,this,paused);
 
             var universe = new Universe( patterns[this.patternName].clone() );
 

==

             stage.addChild(pauseScreen.container);
 
             sequencer.start();
-
-            Ticker.addListener(stage,false);
         }



==



         */
         this.process = function() {
 
+            Ticker.setFPS(25);
+            Ticker.setPaused(false);
+            
+
             $("div.dispGol").each(function() { 
 
                 var dispType = $(this).attr('display');



---



    - modify the pausing/playing stuff such that it can handle multiple 
      diagrams on the page!
    

      what it currently does:

        - pauses and plays the animation by pausing and playing the Ticker
        - controls whether the pause screen is shown when it is created by 
          checking to see whether Ticker is paused or playing.
        - when user clicks on canvas and it toggles pause/play, it determines
          current state by checking to see whether Ticker is paused of playing.
        - when it's in restart mode and the user clicks the canvas, it
            Ticker.removeListener(this.stage);
            Ticker.setPaused(false);
          before cueing the animation again
        
    
      how i think i can modify it

        - the ticker is always running.

        - pause and play the animation by removing the animation's stage as a
          listener on the Ticker and then adding it back as a listener.

            - since there's no way to check the ticker or stage to see if the
              stage is registered with the ticker, I think the DispGol class
              needs a isPaused member

              this.isPaused

        - control whether pause screen is shown in constructor by checking this.isPaused
        - in toggle, check this.isPaused
        - in restart mode and user clicks the canvas
            just do the 
            Ticker.removeListener(this.stage);
            **remove the bit that does
                Ticker.setPaused(false);




        PauseScreen
        
            constructor 
                if (!Ticker.getPaused())
                    this.container.visible = false; 
                else
                    this.container.visible = true;

            play
                Ticker.setPaused(false);

            pause
                Ticker.setPaused(true);

            toggle
                if (Ticker.getPaused())
                    this.play();
                else
                    this.pause();

            canvasClick
                if (this.mode == this._RESTART_MODE)
                    this.mode = this._PAUSE_MODE;
                    this.playButton.visible = true;
                    this.restartBox.visible = false;
                    this.stage.removeAllChildren();
                    Ticker.removeListener(this.stage);
                    Ticker.setPaused(false);
                    this.updaterAnimation.cueAnimation();

        UpdaterAnimation

            start
                Ticker.setFPS(25);
                Ticker.setPaused(true);
                this.cueAnimation();

            cueAnimation
                ..and the end of it:
                Ticker.addListener(stage,false);



::notes on extending anim path

 - what about non-movement tweens?  or tweens that involve more 
   than just movements?  e.g. movements plus making larger or changing 
   colour or whatever?

        one thing to consier is that the this.nextTween could be 
        this.nextMovementTween...

        ...ah, but remember that even non-movement tweens still have to 
        initially position the object in the correct place... so perhaps 
        there could be this.getNextStartingPosition ? 

        and note also that the tween details sent to .to() are a struct, 
        and i could potentially have a means to pass arbitrary struct field 
        names and values into that nextTween funcitona and it could insert 
        them into that struct. ***

 - case: where the object's position depends on the processing logic, e.g.  
   the match pulse.. where that originates depends upon where the match pen 
   is when it gets a match.



:significantly diff alt ways the diagram/animation could work


an initial stage where it 'decomposes' grid to create all the update 
squares
followed by the stage where it processes them to create next grid state

    i've got a feeling it's bad that the user can see the overall pattern 
    while the updating is happening


:showing causal decendance/ancestry

    - the causal descendants of an atom
    - the causal ancestors of an atom
        - you're effectively showing an upside down tree
            - the atom will have multiple ancestors in previous moment
            - and each of those will have multiple ancestors in moment 
              prior to that
            - and so on
        - since there are multiple ancestors in each moment, ideally you 
          want to indicate which cells each of these descend from (not just 
          all the ancestors of those, without distinguishing which descend 
          from which).
        - how it could look
            - each row is the next timestep
            - in bottom-most row highlight cell to show ancestry for
            - in bottom-1 row, show 3x3 bounding box for that cell, and an 
              arror from the cell in last row to the bottom corner of the 
              bounding box... perhaps in the same colour as the bounding 
              box.
            - repeat the same process for subsequent rows.
            - however for each atom in row N you want a grid diagram 
              showing its ancestry in row N-1
            - you have a pool of which cell pos 3x3 you have already 
              created in row N
                - and you only create a new one if it hasn't already been 
                  created.
            - for each grid diagram, indicate these details about it
                - timestep
                - position of influenceBoxCenter 
                - it's x and y position in canvas




:some other GoL code that might get organisational ideas from

http://news.ycombinator.com/item?id=3876522

              

:poss titles for this animation

- 'An animation of the physics of Conway's Game of Life' 
- 'Animated illustration of the Game of Life ontology'
- 'Animation of how the Game of Life universe operates'
- 'Animation of how the Game of Life rules are applied'


